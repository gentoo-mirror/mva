diff --git a/Telegram/SourceFiles/calls/calls_instance.cpp b/Telegram/SourceFiles/calls/calls_instance.cpp
index e99958109..bb7678d3c 100644
--- a/Telegram/SourceFiles/calls/calls_instance.cpp
+++ b/Telegram/SourceFiles/calls/calls_instance.cpp
@@ -719,9 +719,12 @@ std::shared_ptr<tgcalls::VideoCaptureInterface> Instance::getVideoCapture() {
 		? *deviceId
 		: Core::App().settings().callVideoInputDeviceId();
 	auto result = std::shared_ptr<tgcalls::VideoCaptureInterface>(
+		#ifndef DESKTOP_APP_DISABLE_WEBRTC_INTEGRATION
 		tgcalls::VideoCaptureInterface::Create(
 			tgcalls::StaticThreads::getThreads(),
-			startDeviceId.toStdString()));
+			startDeviceId.toStdString())
+		#endif
+		);
 	_videoCapture = result;
 	return result;
 }
diff --git Telegram/lib_webrtc/CMakeLists.txt b/CMakeLists.txt
index 47796f1..1f54c21 100644
--- a/Telegram/lib_webrtc/CMakeLists.txt
+++ b/Telegram/lib_webrtc/CMakeLists.txt
@@ -14,10 +14,13 @@ target_precompile_headers(lib_webrtc PRIVATE ${src_loc}/webrtc/webrtc_pch.h)
 nice_target_sources(lib_webrtc ${src_loc}
 PRIVATE
     webrtc/webrtc_audio_input_tester.cpp
+    webrtc/webrtc_audio_input_tester_dummy.cpp
     webrtc/webrtc_audio_input_tester.h
     webrtc/webrtc_create_adm.cpp
     webrtc/webrtc_create_adm.h
     webrtc/webrtc_media_devices.cpp
+    webrtc/webrtc_media_devices_dummy.cpp
+    webrtc/webrtc_video_track_dummy.cpp
     webrtc/webrtc_media_devices.h
     webrtc/webrtc_video_track.cpp
     webrtc/webrtc_video_track.h
@@ -61,6 +64,21 @@ PUBLIC
     desktop-app::lib_ffmpeg
     desktop-app::external_qt
     desktop-app::external_openal
+)
+if (DESKTOP_APP_DISABLE_WEBRTC_INTEGRATION)
+    remove_target_sources(lib_webrtc ${src_loc}
+        webrtc/webrtc_video_track.cpp
+        webrtc/webrtc_media_devices.cpp
+        webrtc/webrtc_audio_input_tester.cpp
+    )
+else(DESKTOP_APP_DISABLE_WEBRTC_INTEGRATION)
+    remove_target_sources(lib_webrtc ${src_loc}
+        webrtc/webrtc_video_track_dummy.cpp
+        webrtc/webrtc_media_devices_dummy.cpp
+        webrtc/webrtc_audio_input_tester_dummy.cpp
+    )
+target_link_libraries(lib_webrtc
 PRIVATE
     desktop-app::external_webrtc
 )
+endif(DESKTOP_APP_DISABLE_WEBRTC_INTEGRATION)
diff --git Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester.h b/webrtc/webrtc_audio_input_tester.h
index 1ae8d30..008df7e 100644
--- a/Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester.h
+++ b/Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester.h
@@ -24,11 +24,13 @@ public:
 	[[nodiscard]] float getAndResetLevel();
 
 private:
+#ifndef DESKTOP_APP_DISABLE_WEBRTC_INTEGRATION
 	class Impl;
-
+#endif
 	std::shared_ptr<std::atomic<int>> _maxSample;
+#ifndef DESKTOP_APP_DISABLE_WEBRTC_INTEGRATION
 	crl::object_on_thread<Impl> _impl;
-
+#endif
 };
 
 } // namespace Webrtc
diff --git Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester_dummy.cpp b/Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester_dummy.cpp
new file mode 100644
index 0000000..4e47eaa
--- a//dev/null
+++ b/Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester_dummy.cpp
@@ -0,0 +1,11 @@
+#include "webrtc/webrtc_audio_input_tester.h"
+
+namespace Webrtc {
+AudioInputTester::AudioInputTester(const QString &deviceId)
+: _maxSample(std::make_shared<std::atomic<int>>(0)) {}
+AudioInputTester::~AudioInputTester() {}
+void AudioInputTester::setDeviceId(const QString &deviceId) {};
+float AudioInputTester::getAndResetLevel() {
+	return _maxSample->exchange(0) / float(INT16_MAX);\
+}
+}
diff --git Telegram/lib_webrtc/webrtc/webrtc_media_devices_dummy.cpp b/Telegram/lib_webrtc/webrtc/webrtc_media_devices_dummy.cpp
new file mode 100644
index 0000000..8d5d245
--- a/dev/null
+++ b/Telegram/lib_webrtc/webrtc/webrtc_media_devices_dummy.cpp
@@ -0,0 +1,6 @@
+#include "webrtc/webrtc_media_devices.h"
+namespace Webrtc {
+std::vector<VideoInput> GetVideoInputList() { return std::vector<VideoInput>(); };
+std::vector<AudioInput> GetAudioInputList() { return std::vector<AudioInput>(); };
+std::vector<AudioOutput> GetAudioOutputList() { return std::vector<AudioOutput>(); };
+}
diff --git a/Telegram/lib_webrtc/webrtc/webrtc_video_track.h b/Telegram/lib_webrtc/webrtc/webrtc_video_track.h
index 9e13fc0..cb9425c 100644
--- a/Telegram/lib_webrtc/webrtc/webrtc_video_track.h
+++ b/Telegram/lib_webrtc/webrtc/webrtc_video_track.h
@@ -109,6 +109,7 @@ class VideoTrack final {
 	void setState(VideoState state);
 
 private:
+#ifndef DESKTOP_APP_DISABLE_WEBRTC_INTEGRATION
 	class Sink;
 	struct Frame;
 
@@ -116,7 +117,10 @@ class VideoTrack final {
 
 	std::shared_ptr<Sink> _sink;
 	crl::time _inactiveFrom = 0;
+#endif // DESKTOP_APP_DISABLE_WEBRTC_INTEGRATION
+
 	rpl::variable<VideoState> _state;
+
 };
 
 } // namespace Webrtc
diff --git a/Telegram/lib_webrtc/webrtc/webrtc_video_track_dummy.cpp b/Telegram/lib_webrtc/webrtc/webrtc_video_track_dummy.cpp
new file mode 100644
index 0000000..63add6b
--- /dev/null
+++ a/Telegram/lib_webrtc/webrtc/webrtc_video_track_dummy.cpp
@@ -0,0 +1,53 @@
+// This file is part of Desktop App Toolkit,
+// a set of libraries for developing nice desktop applications.
+//
+// For license and copyright information please follow this link:
+// https://github.com/desktop-app/legal/blob/master/LEGAL
+//
+#include "webrtc/webrtc_video_track.h"
+
+namespace Webrtc {
+
+VideoTrack::VideoTrack(VideoState state) : _state(state) {
+}
+
+VideoTrack::~VideoTrack() {
+}
+
+rpl::producer<> VideoTrack::renderNextFrame() const {
+	return rpl::never<>();
+}
+
+auto VideoTrack::sink()
+-> std::shared_ptr<rtc::VideoSinkInterface<webrtc::VideoFrame>> {
+	return nullptr;
+}
+
+[[nodiscard]] VideoState VideoTrack::state() const {
+	return _state.current();
+}
+
+[[nodiscard]] rpl::producer<VideoState> VideoTrack::stateValue() const {
+	return _state.value();
+}
+
+[[nodiscard]] rpl::producer<VideoState> VideoTrack::stateChanges() const {
+	return _state.changes();
+}
+
+void VideoTrack::setState(VideoState state) {
+	_state = state;
+}
+
+void VideoTrack::markFrameShown() {
+}
+
+QImage VideoTrack::frame(const FrameRequest &request) {
+	return QImage();
+}
+
+QSize VideoTrack::frameSize() const {
+	return QSize();
+}
+
+} // namespace Webrtc
