# Copyright 1999-2022 Gentoo Foundation.
# Distributed under the terms of the GNU General Public License v2

# This file contains descriptions of PROSODY_MODULES USE_EXPAND flags.

# Keep it sorted.
addressing - This module is a partial implementation of XEP-0033: Extended Stanza Addressing. (info: https://modules.prosody.im/mod_addressing)
adhoc-account-management - This module adds an ad-hoc command that lets an user change their password. This is useful for clients that don’t have support for XEP-0077 style password changing. In the future, it may provide other account management commands. (info: https://modules.prosody.im/mod_adhoc_account_management)
adhoc-blacklist - This module provides the Edit Blacklist ad-hoc command described in XEP-0133 and also performs the actual blocking of incoming and outgoing server-to-server connections. (info: https://modules.prosody.im/mod_adhoc_blacklist)
adhoc-dataforms-demo - This module provides Ad-Hoc commands for testing data form that includes all kinds of fields. It’s meant to help debug both Prosodys util.dataforms library and clients, eg seeing how various field types are rendered. (info: https://modules.prosody.im/mod_adhoc_dataforms_demo)
adhoc-groups - This module lets you join groups using an ad-hoc command. When a user joins a group, everyone in the group is added to their roster, and they are added to the rosters of existing members. (info: https://modules.prosody.im/mod_adhoc_groups)
adhoc-oauth2-client - Allows creating OAuth2 clients for use with mod_http_oauth2. Otherwise a work-in-progress intended for developers only! (info: https://modules.prosody.im/mod_adhoc_oauth2_client)
admin-blocklist - This module uses the blocklists set by admins for blocking s2s connections. (info: https://modules.prosody.im/mod_admin_blocklist)
admin-message - This module provides a console over XMPP. All the commands of the mod_admin_telnet module are available from an XMPP client. (info: https://modules.prosody.im/mod_admin_message)
admin-notify - This module provides an API for other module developers to send notification messages to host admins. (info: https://modules.prosody.im/mod_admin_notify)
admin-probe - This module lets server administrators send &lt;presence type="probe"/&gt; to any local user and receive their presence in response, bypassing roster checks. (info: https://modules.prosody.im/mod_admin_probe)
admin-web - This module provides a basic web administration interface. It currently gives you access to Ad-Hoc commands on any virtual host or component that you are set as an administrator for in the Prosody config file. It also provides a live list of all S2S and C2S connections. (info: https://modules.prosody.im/mod_admin_web)
alias - This module allows you to set up aliases that alert people who try to contact them or add them to their roster what your actual JID is. This is useful for changing JIDs, or just in the case where you own both example.com and example.net, and want people who contact you@example.com to be alerted to contact you at you@example.net instead. (info: https://modules.prosody.im/mod_alias)
atom - This module exposes users microblogging on Prosodys built-in HTTP server. (info: https://modules.prosody.im/mod_atom)
audit - This module provides infrastructure for audit logging inside Prosody. (info: https://modules.prosody.im/mod_audit)
audit-auth - This module stores authentication failures and authentication successes in the audit log provided by mod_audit. (info: https://modules.prosody.im/mod_audit_auth)
audit-register - This module stores successful user registrations in the audit log provided by mod_audit. (info: https://modules.prosody.im/mod_audit_register)
auth-any - This module accepts any username and password, which can be useful for testing. (info: https://modules.prosody.im/mod_auth_any)
auth-ccert - This module implements PKI-style client certificate authentication. You will therefore need your own Certificate Authority. How to set that up is beyond the current scope of this document. (info: https://modules.prosody.im/mod_auth_ccert)
auth-custom-http - To authenticate users, this module does a POST request to a configured URL with a JSON payload. It is not async so requests block the server until answered. (info: https://modules.prosody.im/mod_auth_custom_http)
auth-cyrus - XMPP uses a standard authentication protocol called ‘SASL’ to validate client credentials. Prosody has a built-in SASL library, and uses this by default to validate credentials against Prosody’s internal account store. (info: https://modules.prosody.im/mod_auth_cyrus)
auth-dovecot - This is a Prosody authentication plugin which uses Dovecot as the backend. (info: https://modules.prosody.im/mod_auth_dovecot)
auth-external-insecure - Allow client authentication to be handled by an external script/process. (info: https://modules.prosody.im/mod_auth_external_insecure)
auth-ha1 - This module authenticates users against hashed credentials stored in a plain text file. The format is the same as that used by reTurnServer. (info: https://modules.prosody.im/mod_auth_ha1)
auth-http - This authentication module allows Prosody to authenticate users against an external HTTP service. (info: https://modules.prosody.im/mod_auth_http)
auth-http-async - This is an experimental authentication module that does an asynchronous HTTP call to verify username and password. (info: https://modules.prosody.im/mod_auth_http_async)
auth-http-cookie - This is an experimental authentication module that does an asynchronous HTTP call to verify username and password. (info: https://modules.prosody.im/mod_auth_http_cookie)
auth-imap - This is a Prosody authentication plugin which uses a generic IMAP server as the backend. (info: https://modules.prosody.im/mod_auth_imap)
auth-internal-yubikey - A YubiKey is a small USB one-time-password (OTP) generator. (info: https://modules.prosody.im/mod_auth_internal_yubikey)
auth-joomla - This module allows you to authenticate against an Joomla database. (info: https://modules.prosody.im/mod_auth_joomla)
auth-ldap - This is a Prosody authentication plugin which uses LDAP as the backend. (info: https://modules.prosody.im/mod_auth_ldap)
auth-ldap2 - See mod_lib_ldap for more information. (info: https://modules.prosody.im/mod_auth_ldap2)
auth-oauthbearer - This is an authentication module for the SASL OAUTHBEARER mechanism, as provided by mod_sasl_oauthbearer. (info: https://modules.prosody.im/mod_auth_oauthbearer)
auth-pam - This module makes Prosody authenticate users against PAM (Linux Pluggable Authentication Modules) (info: https://modules.prosody.im/mod_auth_pam)
auth-phpbb3 - This module allows you to authenticate against an PHPBB3 database. (info: https://modules.prosody.im/mod_auth_phpbb3)
auth-sql - Allow client authentication to be handled by an SQL database query. (info: https://modules.prosody.im/mod_auth_sql)
auth-token - This module enables Prosody to authenticate time-based one-time-pin (TOTP) HMAC tokens. (info: https://modules.prosody.im/mod_auth_token)
auth-wordpress - This module allows you to authenticate against an Wordpress database. (info: https://modules.prosody.im/mod_auth_wordpress)
auto156 - No documentation yet :( (info: https://modules.prosody.im/mod_auto156)
auto-accept-subscriptions - In some environments where all users on the system have mutual trust in each other, it’s sometimes fine to skip the usual authorization process to add someone to your contact list and see their status. (info: https://modules.prosody.im/mod_auto_accept_subscriptions)
auto-activate-hosts - By default Prosody does not automatically activate/deactivate hosts when they are added to and removed from the configuration. (info: https://modules.prosody.im/mod_auto_activate_hosts)
auto-answer-disco-info - This module intercepts disco#info queries and checks if we already know the capabilities of this session, in which case we don’t transmit the iq and answer it ourselves. (info: https://modules.prosody.im/mod_auto_answer_disco_info)
auto-moved - This module implements XEP-0283: Moved, a way for contacts to notify you that they have moved to a new address. (info: https://modules.prosody.im/mod_auto_moved)
aws-profile - This module adds support for reading AWS IAM access credentials from EC2 instance metadata, to allow Prosody modules to gain role-based access to AWS services. (info: https://modules.prosody.im/mod_aws_profile)
benchmark-storage - To benchmark mod_storage_internal: (info: https://modules.prosody.im/mod_benchmark_storage)
bidi - This module implements XEP-0288: Bidirectional Server-to-Server Connections. It allows servers to use a single connection for sending stanzas to each other, instead of two connections (one for stanzas in each direction). (info: https://modules.prosody.im/mod_bidi)
bind2 - Experimental early implementation of XEP-0386: Bind 2.0 for use with mod_sasl2. (info: https://modules.prosody.im/mod_bind2)
block-outgoing - This module blocks all outgoing stanzas from a list of users. (info: https://modules.prosody.im/mod_block_outgoing)
block-registrations - On a server with public registration it is usually desirable to prevent registration of certain “reserved” accounts, such as “admin”. (info: https://modules.prosody.im/mod_block_registrations)
block-s2s-subscriptions - No documentation yet :( (info: https://modules.prosody.im/mod_block_s2s_subscriptions)
block-strangers - No documentation yet :( (info: https://modules.prosody.im/mod_block_strangers)
block-subscribes - No documentation yet :( (info: https://modules.prosody.im/mod_block_subscribes)
block-subscriptions - No documentation yet :( (info: https://modules.prosody.im/mod_block_subscriptions)
blocking - Privacy lists are a widely implemented protocol for instructing your server on blocking communications with selected users and services. (info: https://modules.prosody.im/mod_blocking)
bob - This module extracts cid: URIs (as defined in XEP-0231) from messages, and replies with their content whenever another client asks for the actual data. (info: https://modules.prosody.im/mod_bob)
bookmarks - WARNING: This module is deprecated, please use mod_bookmarks2 going forward or mod_bookmarks included with Prosody (info: https://modules.prosody.im/mod_bookmarks)
bookmarks2 - This module has been merged into Prosody as mod_bookmarks. Users of Prosody trunk should switch to that. (info: https://modules.prosody.im/mod_bookmarks2)
broadcast - This module largely duplicates the functionality of the standard mod_announce that is included with Prosody. It was developed for compatibility with some clients (e.g. iChat) that do not support ad-hoc commands or sending to JIDs with the format ‘example.com/announce/online’. (info: https://modules.prosody.im/mod_broadcast)
c2s-conn-throttle - This module allows to throttle those client connections which exceed a n*seconds limit. (info: https://modules.prosody.im/mod_c2s_conn_throttle)
c2s-limit-sessions - This module lets you limit number of resources a user may connect. (info: https://modules.prosody.im/mod_c2s_limit_sessions)
cache-c2s-caps - This module listens on presences containing caps (XEP-0115) and asks the client for the corresponding disco#info if it changed. (info: https://modules.prosody.im/mod_cache_c2s_caps)
captcha-registration - Prosody-captcha is a little modification of prosody’s “mod_register.lua” module that provides captcha protection for registration form. (info: https://modules.prosody.im/mod_captcha_registration)
carbons - Since Prosody 0.10, this module is included in Prosody, you will be redirected there shortly. (info: https://modules.prosody.im/mod_carbons)
carbons-adhoc - No documentation yet :( (info: https://modules.prosody.im/mod_carbons_adhoc)
carbons-copies - No documentation yet :( (info: https://modules.prosody.im/mod_carbons_copies)
checkcerts - This module periodically checks your certificate to see if it is about to expire soon. The time before expiry is printed in the logs. About a week before a certificate expires, reminder messages will be sent to admins. (info: https://modules.prosody.im/mod_checkcerts)
client-certs - XEP-0257 specifies a protocol for clients to store and manage client side certificates. When a client presents a stored client side certificate during the TLS handshake, it can log in without supplying a password (using SASL EXTERNAL). This makes it possible to have multiple devices accessing an account, without any of them needing to know the password, and makes it easier to revoke access for a single device. (info: https://modules.prosody.im/mod_client_certs)
client-proxy - This module must be used as a component. For example: (info: https://modules.prosody.im/mod_client_proxy)
cloud-notify - This is an implementation of the server bits of XEP-0357: Push Notifications. It allows clients to register an “app server” which is notified about new messages while the user is offline, disconnected or the session is hibernated by mod_smacks. Implementation of the “app server” is not included1. (info: https://modules.prosody.im/mod_cloud_notify)
cloud-notify-encrypted - This module implements support for a Encrypted Push Notifications, a custom extension to XEP-0357: Push Notifications. (info: https://modules.prosody.im/mod_cloud_notify_encrypted)
cloud-notify-extensions - This is a meta-module that simply enables all the modules required to support Siskin or Snikket iOS on a Prosody server. (info: https://modules.prosody.im/mod_cloud_notify_extensions)
cloud-notify-filters - This module implements support for a group of push notification extensions by the Tigase team that allow a client to specify filters to be applied to push notifications. (info: https://modules.prosody.im/mod_cloud_notify_filters)
cloud-notify-priority-tag - This module implements support for a Tigase XMPP extension, Priority of notifications. It is a custom extension to XEP-0357: Push Notifications. (info: https://modules.prosody.im/mod_cloud_notify_priority_tag)
compact-resource - No documentation yet :( (info: https://modules.prosody.im/mod_compact_resource)
compat-bind - No documentation yet :( (info: https://modules.prosody.im/mod_compat_bind)
compat-dialback - This module provides a workaround for servers that do not set the to attribute on stream headers, which is required per RFC6120: (info: https://modules.prosody.im/mod_compat_dialback)
compat-muc-admin - Adds compatibility for old clients/libraries attempting to change affiliations and retrieve ’em sending the &lt; http://jabber.org/protocol/muc#owner &gt; xmlns instead of &lt; http://jabber.org/protocol/muc#admin &gt;. (info: https://modules.prosody.im/mod_compat_muc_admin)
compat-vcard - No documentation yet :( (info: https://modules.prosody.im/mod_compat_vcard)
compliance-2021 - Compare the list of enabled modules with XEP-0443: XMPP Compliance Suites 2021 and produce basic report to the Prosody log file. (info: https://modules.prosody.im/mod_compliance_2021)
component-client - This module turns Prosody hosts into components of other XMPP servers. (info: https://modules.prosody.im/mod_component_client)
component-http - This module allows you to implement a component that speaks HTTP. Stanzas (such as messages) coming from XMPP are sent to a configurable URL as a HTTP POST. If the POST returns a response, that response is returned to the sender over XMPP. (info: https://modules.prosody.im/mod_component_http)
component-roundrobin - This module enables multiple instances of external components to connect at the same time, and does round-robin load-balancing of incoming stanzas. (info: https://modules.prosody.im/mod_component_roundrobin)
compression-unsafe - NOTE: XMPP compression has unresolved security concerns, and this module has been removed from Prosody and renamed. (info: https://modules.prosody.im/mod_compression_unsafe)
conformance-restricted - This module sends processing instructions, comments, DTDs and a non predefined entity (defined by the DTD) to the requesting entity. (info: https://modules.prosody.im/mod_conformance_restricted)
conversejs - This module simplifies setup of Converse.js by serving it from Prosodys internal http server along with generated configuration to match the local VirtualHost. It becomes available on an URL like https://example.com:5281/conversejs (info: https://modules.prosody.im/mod_conversejs)
couchdb - Note: This module needs updating to the 0.8 storage module API. (info: https://modules.prosody.im/mod_couchdb)
csi - Since Prosody 0.11, this module is included in Prosody, you will be redirected there shortly. (info: https://modules.prosody.im/mod_csi)
csi-battery-saver - Please use this module instead of mod_csi_pump if you want timestamping, properly handled carbon copies, support for handling encrypted messages and correctly handled smacks events. (info: https://modules.prosody.im/mod_csi_battery_saver)
csi-compat - This module implements the google:queue protocol and maps it to mod_csi events. (info: https://modules.prosody.im/mod_csi_compat)
csi-grace-period - This module helps reduces power usage of inactive mobile clients while another client is actively used. E.g. in the case of chatting on a desktop computer, instantly pushing messages to a phone in someones pocket is not the best use of radio time. (info: https://modules.prosody.im/mod_csi_grace_period)
csi-muc-priorities - This module lets users specify which of the group chats they are in are less important. This influences when mod_csi_simple decides to send stanzas vs waiting until there is more to send. Users in many large public channels might benefit from this. (info: https://modules.prosody.im/mod_csi_muc_priorities)
csi-simple-compat - This module allows using the mod_csi_simple setting csi_important_payloads (added in trunk/0.12) in Prosody 0.11.x. (info: https://modules.prosody.im/mod_csi_simple_compat)
data-access - This module gives HTTP access to prosody’s storage mechanism. It uses normal HTTP verbs and Basic HTTP authentication, so you could call it RESTful if you like buzzwords. (info: https://modules.prosody.im/mod_data_access)
debug-omemo - This module allows you to view advanced information about OMEMO-encrypted messages, and can be helpful to diagnose decryption problems. (info: https://modules.prosody.im/mod_debug_omemo)
debug-traceback - This module writes out a traceback to a file when a chosen signal (by default SIGUSR1) is received. It can be useful to diagnose cases where Prosody is unresponsive. (info: https://modules.prosody.im/mod_debug_traceback)
default-bookmarks - This module allows you to add default bookmarks for users. It only kicks in when the user has no existing bookmarks, so users are free to add, change or remove them. (info: https://modules.prosody.im/mod_default_bookmarks)
default-vcard - It is possible for the user to supply more than just a username and password when creating an account using mod_register. This module automatically copies over that data to the user’s vcard. (info: https://modules.prosody.im/mod_default_vcard)
delegation - Namespace Delegation is an extension which allows server to delegate some features handling to an entity/component. Typical use case is an external PEP service, but it can be used more generally when your preferred server lack one internal feature, and you found an external component which can do it. (info: https://modules.prosody.im/mod_delegation)
deny-omemo - No documentation yet :( (info: https://modules.prosody.im/mod_deny_omemo)
devices - This is an experimental module that aims to identify the different devices (technically clients) that a user uses with their account. (info: https://modules.prosody.im/mod_devices)
disable-tls - This module can be used to prevent Prosody from offering TLS on client ports that you specify. This can be useful to work around buggy clients when transport security is not required. (info: https://modules.prosody.im/mod_disable_tls)
discodot - Put this module somewhere Prosody will find it and then run prosodyctl mod_discodot | dot -Tsvg -o disco-graph.svg to receive a graph like this1: (info: https://modules.prosody.im/mod_discodot)
discoitems - This Prosody plugin lets you manually override the service discovery items for a host. (info: https://modules.prosody.im/mod_discoitems)
dnsupdate - Generate a DNS UPDATE order in format suitable for nsupdate based on current port configuration. (info: https://modules.prosody.im/mod_dnsupdate)
dwd - This module implements an optimization of the Dialback protocol, by skipping the dialback step for servers presenting a valid certificate. (info: https://modules.prosody.im/mod_dwd)
e2e-policy - This module was written to encourage usage of End-to-end encryption for chat and MUC messages. It can be configured to warn the sender after every plaintext/unencrypted message or to block all plaintext/unencrypted messages. It also supports MUC and JID whitelisting, so administrators can for example whitelist public support MUCs ;-) (info: https://modules.prosody.im/mod_e2e_policy)
easy-invite - NOTE: This module has been deprecated. Its functionality has been moved to other modules, see the mod_invites documentation for details. (info: https://modules.prosody.im/mod_easy_invite)
email - No documentation yet :( (info: https://modules.prosody.im/mod_email)
email-pass - This module aims to help in the procedure of user password restoration. To start the restoration, the user must go to an URL provided by this module, fill the JID and email and submit the request. (info: https://modules.prosody.im/mod_email_pass)
export-skeletons - Exports message archives in a format stripped from private information and message content. (info: https://modules.prosody.im/mod_export_skeletons)
extdisco - This module adds support for XEP-0215: External Service Discovery, which lets Prosody advertise non-XMPP services. (info: https://modules.prosody.im/mod_extdisco)
external-services - This module implementing XEP-0215 is included with Prosody 0.12 but made available here for older versions. (info: https://modules.prosody.im/mod_external_services)
fallback-vcard - No documentation yet :( (info: https://modules.prosody.im/mod_fallback_vcard)
file-management - This module exposes ad-hoc commands XEP-0050 for listing uploaded files, and later for managing them. (info: https://modules.prosody.im/mod_file_management)
filter-chatstates - Some mobile XMPP client developers consider Chat State Notifications to be a waste of power and bandwidth, especially when the user is not actively looking at their device. This module will filter them out while the session is considered inactive. It depends on mod_csi for deciding when to begin and end filtering. (info: https://modules.prosody.im/mod_filter_chatstates)
filter-words - No documentation yet :( (info: https://modules.prosody.im/mod_filter_words)
firewall - Note: mod_firewall is in its very early stages. This documentation is liable to change, and some described functionality may be missing, incomplete or contain bugs. (info: https://modules.prosody.im/mod_firewall)
flash-policy - This Prosody plugin adds support for flash socket policies. When connecting with a flash client (from a webpage, not an exe) to prosody the flash client requests for an xml “file” on port 584 or the connecting port (5222 in the case of default xmpp). Responding on port 584 is tricky because it requires root priviliges to set up a socket on a port &lt; 1024. (info: https://modules.prosody.im/mod_flash_policy)
graceful-shutdown - This module is an experiment about a more graceful shutdown process. (info: https://modules.prosody.im/mod_graceful_shutdown)
group-bookmarks - mod_groups allows you to insert contacts into users’ contact lists. Well mod_group_bookmarks allows you to insert chatrooms into the user’s bookmarks. These are fetched by their client and automatically joined when the log in. (info: https://modules.prosody.im/mod_group_bookmarks)
groups-internal - No documentation yet :( (info: https://modules.prosody.im/mod_groups_internal)
groups-migration - No documentation yet :( (info: https://modules.prosody.im/mod_groups_migration)
groups-muc-bookmarks - No documentation yet :( (info: https://modules.prosody.im/mod_groups_muc_bookmarks)
groups-shell - No documentation yet :( (info: https://modules.prosody.im/mod_groups_shell)
host-blacklist - No documentation yet :( (info: https://modules.prosody.im/mod_host_blacklist)
host-guard - As often it’s undesiderable to employ only whitelisting logics in public environments, this module let’s you more selectively restrict access to your hosts (component or server host) either disallowing access completely (with optional exceptions) or blacklisting certain sources. (info: https://modules.prosody.im/mod_host_guard)
host-status-check - This module allows you to monitor the state of hosts and components in your Prosody server. For example, it will track whether components are connected and (if the component supports it) listen for heartbeats sent by the component to indicate that it is functioning. (info: https://modules.prosody.im/mod_host_status_check)
host-status-heartbeat - This module integrates with mod_host_status_check to provide heartbeats at regular intervals. (info: https://modules.prosody.im/mod_host_status_heartbeat)
http-admin-api - No documentation yet :( (info: https://modules.prosody.im/mod_http_admin_api)
http-altconnect - This module helps make BOSH and WebSocket connection endpoints discoverable via the HTTP method described in XEP-0156. (info: https://modules.prosody.im/mod_http_altconnect)
http-auth-check - This module lets you test whether a set of credentials are valid, using Prosody’s configured authentication mechanism. (info: https://modules.prosody.im/mod_http_auth_check)
http-authentication - This module enforces HTTP Basic authentication across all HTTP endpoints served by Prosody. (info: https://modules.prosody.im/mod_http_authentication)
http-avatar - This module serves avatars from local users who have one set in their vCard, see XEP-0054 and XEP-0153. (info: https://modules.prosody.im/mod_http_avatar)
http-dir-listing - This module generates directory listings when invoked by mod_http_files. See documentation on mod_http_files. (info: https://modules.prosody.im/mod_http_dir_listing)
http-dir-listing2 - This module generates directory listings when invoked by mod_http_files. See documentation on mod_http_files. (info: https://modules.prosody.im/mod_http_dir_listing2)
http-favicon - This simple module serves a favicon.ico from prosodys HTTP server and nothing else. (info: https://modules.prosody.im/mod_http_favicon)
http-host-status-check - This module exposes serves over HTTP the information collected by mod_host_status_check and mod_host_status_heartbeat in a convenient format for automated monitoring tools. (info: https://modules.prosody.im/mod_http_host_status_check)
http-hostaliases - No documentation yet :( (info: https://modules.prosody.im/mod_http_hostaliases)
http-index - This module produces a list of enabled HTTP “apps” exposed from Prosody at http://example.org:5280/, e.g. mod_http_muc_log, mod_http_files or mod_admin_web. If you think Prosodys default “root” web page (a 404 error usually) is boring, this might be the module for you! :) (info: https://modules.prosody.im/mod_http_index)
http-libjs - This module serves common static CSS and Javascript libraries from the filesystem, allowing other HTTP modules to easily reference them. (info: https://modules.prosody.im/mod_http_libjs)
http-logging - This module produces more detailed HTTP logs for Prosodys built-in HTTP server. The format is similar to that of Apache and go into Prosodys normal logs at the info level. (info: https://modules.prosody.im/mod_http_logging)
http-muc-kick - This module allows kicking users out of MUCs via HTTP. It can be used in combination with mod_muc_http_auth as a complement to externalize MUC access. (info: https://modules.prosody.im/mod_http_muc_kick)
http-muc-log - This module provides a built-in web interface to view chatroom logs stored by mod_mam_muc. (info: https://modules.prosody.im/mod_http_muc_log)
http-oauth2 - This module is a work-in-progress intended for developers only! (info: https://modules.prosody.im/mod_http_oauth2)
http-pep-avatar - This module serves avatars from local users who have published XEP-0084: User Avatar via PEP. (info: https://modules.prosody.im/mod_http_pep_avatar)
http-prebind - For why this can be useful, see https://metajack.im/2009/12/14/fastest-xmpp-sessions-with-http-prebinding/ (info: https://modules.prosody.im/mod_http_prebind)
http-rest - This module provides a RESTful method for sending XMPP stanzas. (info: https://modules.prosody.im/mod_http_rest)
http-roster-admin - NOTE: THIS MODULE IS RELEASED UNDER THE MOZILLA PUBLIC LICENSE VERSION 2. (info: https://modules.prosody.im/mod_http_roster_admin)
http-stats-stream - This module provides a streaming interface to Prosodys internal statistics via Server-sent events. (info: https://modules.prosody.im/mod_http_stats_stream)
http-upload - This module implements XEP-0363, versions 0.2 and 0.3, which let clients upload files over HTTP. (info: https://modules.prosody.im/mod_http_upload)
http-upload-external - This module implements XEP-0363, which lets clients upload files over HTTP to an external web server. (info: https://modules.prosody.im/mod_http_upload_external)
http-user-count - No documentation yet :( (info: https://modules.prosody.im/mod_http_user_count)
http-xep227 - This module allows a user to import or export account data using a simple HTTP API. The data is expected to be in the format described by XEP-0227: Portable Import/Export Format for XMPP-IM Servers. (info: https://modules.prosody.im/mod_http_xep227)
idlecompat - This module adds XEP-0319 idle tags to presence stanzas containing XEP-0012: Last Activity tags for idle indication (e.g. supported by libpurple clients). It works on outgoing and incoming presence stanzas. (info: https://modules.prosody.im/mod_idlecompat)
ignore-host-chatstates - This module discards typing notifications sent to a bare host JID, preventing error replies to be sent. These errors are harmless but can be annoying sometimes if your client shows them prominently. (info: https://modules.prosody.im/mod_ignore_host_chatstates)
incidents-handling - This module implements XEP-268. (info: https://modules.prosody.im/mod_incidents_handling)
inject-ecaps2 - This module injects ecaps2 elements in the presence once the legacy caps (XEP-0115) are received. (info: https://modules.prosody.im/mod_inject_ecaps2)
inotify-reload - No documentation yet :( (info: https://modules.prosody.im/mod_inotify_reload)
invite - NOTE: This module has been deprecated. Its functionality has been moved to other modules, see the mod_invites documentation for details. (info: https://modules.prosody.im/mod_invite)
invites - This module is part of the suite of modules that implement invite-based account registration for Prosody. The other modules are: (info: https://modules.prosody.im/mod_invites)
invites-adhoc - This module is part of the suite of modules that implement invite-based account registration for Prosody. The other modules are: (info: https://modules.prosody.im/mod_invites_adhoc)
invites-api - This module is part of the suite of modules that implement invite-based account registration for Prosody. The other modules are: (info: https://modules.prosody.im/mod_invites_api)
invites-groups - No documentation yet :( (info: https://modules.prosody.im/mod_invites_groups)
invites-page - This module is part of the suite of modules that implement invite-based account registration for Prosody. The other modules are: (info: https://modules.prosody.im/mod_invites_page)
invites-register - This module is part of the suite of modules that implement invite-based account registration for Prosody. The other modules are: (info: https://modules.prosody.im/mod_invites_register)
invites-register-api - No documentation yet :( (info: https://modules.prosody.im/mod_invites_register_api)
invites-register-web - This module is part of the suite of modules that implement invite-based account registration for Prosody. The other modules are: (info: https://modules.prosody.im/mod_invites_register_web)
invites-tracking - Invites are an intermediate way between opening registrations completely and closing registrations completely. (info: https://modules.prosody.im/mod_invites_tracking)
ipcheck - Sometimes for various reasons a client might want to know its IP address as it appears to the server. This simple XEP allows the client to ask the server for the IP address it is connected from. (info: https://modules.prosody.im/mod_ipcheck)
isolate-host - In some environments it is desirable to isolate one or more hosts, and prevent communication with external, or even other internal domains. (info: https://modules.prosody.im/mod_isolate_host)
jid-prep - This is a plugin that implements the JID prep protocol defined in https://xmpp.org/extensions/xep-0328.html (info: https://modules.prosody.im/mod_jid_prep)
json-streams - This plugin encodes XMPP as JSON. This is an implementation of XEP-0295: JSON Encodings for XMPP. (info: https://modules.prosody.im/mod_json_streams)
jsxc - No documentation yet :( (info: https://modules.prosody.im/mod_jsxc)
lastlog - Simple module that stores the timestamp of when a user logs in. (info: https://modules.prosody.im/mod_lastlog)
lastlog2 - Similar to mod_lastlog, this module records the last timestamp of various events, but keeps the last timestamp per type of event, instead of the last event. (info: https://modules.prosody.im/mod_lastlog2)
latex - This module intercepts messages between users and into chatrooms, and attaches a links to a rendered version of any LaTeX in the message. This requires client support for XHTML-IM, and fetching images via HTTP. (info: https://modules.prosody.im/mod_latex)
lib-ldap - The LDAP plugin suite includes an authentication plugin (mod_auth_ldap2) and storage plugin (mod_storage_ldap) to query against an LDAP server. It also provides a plugin library (mod_lib_ldap) for accessing an LDAP server to make writing other LDAP-based plugins easier in the future. (info: https://modules.prosody.im/mod_lib_ldap)
limit-auth - This module lets you put a per-IP limit on the number of failed authentication attempts. (info: https://modules.prosody.im/mod_limit_auth)
limits - Since Prosody 0.10, this module is included in Prosody, you will be redirected there shortly. (info: https://modules.prosody.im/mod_limits)
limits-exception - This module allows you to configure a list of JIDs that should be allowed to bypass rate limit restrictions. (info: https://modules.prosody.im/mod_limits_exception)
list-active - This module lists those users, who have used their account in a defined time-frame, basically the inverse of mod_list_inactive. (info: https://modules.prosody.im/mod_list_active)
list-inactive - This module lists those users, who haven’t used their account in a defined time-frame. (info: https://modules.prosody.im/mod_list_inactive)
listusers - This module adds a command to prosodyctl for listing users. (info: https://modules.prosody.im/mod_listusers)
log-auth - Prosody doesn’t write IP addresses to its log file by default for privacy reasons (unless debug logging is enabled). (info: https://modules.prosody.im/mod_log_auth)
log-events - No documentation yet :( (info: https://modules.prosody.im/mod_log_events)
log-events-by-cpu-usage - This module logs events where more than a certain amount of CPU time was spent. (info: https://modules.prosody.im/mod_log_events_by_cpu_usage)
log-events-by-memory - This module compares the memory usage reported by Lua before and after each event and reports it to the log if it exceeds the configuration setting log_memory_threshold (in bytes). (info: https://modules.prosody.im/mod_log_events_by_memory)
log-http - This module logs outgoing requests that go via the internal net.http API. (info: https://modules.prosody.im/mod_log_http)
log-json - Here we log to /var/log/prosody/prosody.json: (info: https://modules.prosody.im/mod_log_json)
log-mark - This module sends -- MARK -- to the log once per minute. This may be useful to give a sense of how busy the server is or see that logging and timers are still working. (info: https://modules.prosody.im/mod_log_mark)
log-messages-sql - Consider using mod_mam together with mod_readonly instead. (info: https://modules.prosody.im/mod_log_messages_sql)
log-rate - If you ever wanted to collect statistics on the number of log messages, this is the module for you! (info: https://modules.prosody.im/mod_log_rate)
log-ringbuffer - Sometimes debug logs are too verbose for continuous logging to disk. However occasionally you may be interested in the debug logs when a certain event occurs. (info: https://modules.prosody.im/mod_log_ringbuffer)
log-sasl-mech - No documentation yet :( (info: https://modules.prosody.im/mod_log_sasl_mech)
log-slow-events - Most activities in Prosody take place within our built-in events framework, for example stanza processing and HTTP request handling, authentication, etc. (info: https://modules.prosody.im/mod_log_slow_events)
mam - Since Prosody 0.10, this module is included in Prosody, you will be redirected there shortly. (info: https://modules.prosody.im/mod_mam)
mam-adhoc - This module complements mod_mam by allowing clients to change archiving preferences through an Ad-hoc command. (info: https://modules.prosody.im/mod_mam_adhoc)
mam-archive - Implementation of XEP-0136: Message Archiving for mod_mam. (info: https://modules.prosody.im/mod_mam_archive)
mam-muc - Since Prosody 0.11, this module is included in Prosody, you will be redirected there shortly. (info: https://modules.prosody.im/mod_mam_muc)
mamsub - No documentation yet :( (info: https://modules.prosody.im/mod_mamsub)
manifesto - This module informs users about the XMPP Test day and whether their contacts are affected. For mor info about the test day, see https://stpeter.im/journal/1496.html (info: https://modules.prosody.im/mod_manifesto)
map - This is a prototype for an experimental archive summary API recently added in Prosody trunk. (info: https://modules.prosody.im/mod_map)
measure-active-users - This module calculates the number of daily, weekly and monthly active users — often abbreviated as DAU, WAU and MAU. (info: https://modules.prosody.im/mod_measure_active_users)
measure-client-features - This module measures the features supported by each connected client. (info: https://modules.prosody.im/mod_measure_client_features)
measure-client-identities - This module measures the number of connected clients per identity. (info: https://modules.prosody.im/mod_measure_client_identities)
measure-client-presence - This module measures the number of resources of a certain show (available, away, etc.) currently connected, and reports using Prosody 0.10 APIs (info: https://modules.prosody.im/mod_measure_client_presence)
measure-cpu - This module measures CPU usage and reports using Prosody 0.10 APIs (info: https://modules.prosody.im/mod_measure_cpu)
measure-lua - No documentation yet :( (info: https://modules.prosody.im/mod_measure_lua)
measure-malloc - This module collects stats from util.pposix.meminfo usage and reports using Prosody 0.12 APIs (info: https://modules.prosody.im/mod_measure_malloc)
measure-memory - This module measures memory usage and reports using Prosody 0.10 APIs (info: https://modules.prosody.im/mod_measure_memory)
measure-message-e2ee - This module measures the rate at which text messages are exchanged, and their encryption status. (info: https://modules.prosody.im/mod_measure_message_e2ee)
measure-message-length - Simple module that collects statistics on message length in bytes, word count and line count. (info: https://modules.prosody.im/mod_measure_message_length)
measure-muc - This module collects statistics from group chat component. (info: https://modules.prosody.im/mod_measure_muc)
measure-process - This module exposes process resource use metrics similar to those exposed by default when using a Prometheus client library. Specifically, the following metrics are exposed: (info: https://modules.prosody.im/mod_measure_process)
measure-registration - This module measures the rate at which users register on the server (through providers like mod_register_ibr or mod_register_web). (info: https://modules.prosody.im/mod_measure_registration)
measure-stanza-counts - This module measures the number of stanzas handled and reports using Prosody 0.12+ APIs (info: https://modules.prosody.im/mod_measure_stanza_counts)
measure-storage - This module collects statistics from storage operations. (info: https://modules.prosody.im/mod_measure_storage)
message-logging - Often service administrators need to log their users’ messages for reasons such as auditing and compliance. This module simply logs user messages to simple text files, which can be easily searched, archived or removed on a regular basis. (info: https://modules.prosody.im/mod_message_logging)
migrate - This module adds a command to prosodyctl for copying data between storage drivers. (info: https://modules.prosody.im/mod_migrate)
migrate-http-upload - This is a migration script for converting records of mod_http_upload into the format used by the new mod_http_file_share which will be available with Prosody 0.12 (currently in trunk). (info: https://modules.prosody.im/mod_migrate_http_upload)
minimix - Normally when joining a MUC groupchat, it is each individual client that joins. This means their presence in the group is tied to the session, which can be short-lived or unstable, especially in the case of mobile clients. (info: https://modules.prosody.im/mod_minimix)
motd-sequential - mod_motd_sequential is a variant of mod_motd that lets you specify a sequence of MOTD messages instead of a single static one. Each message is only sent once and the module keeps track of who as seen which message. (info: https://modules.prosody.im/mod_motd_sequential)
muc-access-control - No documentation yet :( (info: https://modules.prosody.im/mod_muc_access_control)
muc-archive - This module logs the conversations of chatrooms running on the server to Prosody’s data store. (info: https://modules.prosody.im/mod_muc_archive)
muc-auto-reserve-nicks - This module automatically reserves the nickname of a user when they first join a MUC. That’s all. (info: https://modules.prosody.im/mod_muc_auto_reserve_nicks)
muc-badge - This module generates a badge for MUC rooms at a HTTP URL like https://conference.example.com:5281/muc_badge/room@conference.example.org containing the number of occupants. (info: https://modules.prosody.im/mod_muc_badge)
muc-ban-ip - One frequent complaint about XMPP chatrooms (MUCs) compared to IRC is the inability for a room admin to ban a user based on their IP address. This is because an XMPP user is not identified on the network by their IP address, only their JID. (info: https://modules.prosody.im/mod_muc_ban_ip)
muc-batched-probe - This module allows you to probe the presences of multiple MUC occupants or members. (info: https://modules.prosody.im/mod_muc_batched_probe)
muc-block-pm - This module prevents unaffiliated users from sending private messages in chat rooms, unless someone with an affiliation (member, admin etc) messages them first. (info: https://modules.prosody.im/mod_muc_block_pm)
muc-bot - This module makes it easier to write MUC bots by removing the requirement that the bot be online and joined to the room. (info: https://modules.prosody.im/mod_muc_bot)
muc-cloud-notify - This is an experimental fork of mod_cloud_notify which allows a XEP-0357 Push Notifications App Servers to be registered against a MUC domain (normally they’re only registered against your own chat server’s domain). (info: https://modules.prosody.im/mod_muc_cloud_notify)
muc-config-restrict - Sometimes, especially on public services, you may want to allow people to create their own rooms, but prevent some options from being modified by normal users. (info: https://modules.prosody.im/mod_muc_config_restrict)
muc-defaults - Creates MUCs with default configuration settings upon Prosody startup. (info: https://modules.prosody.im/mod_muc_defaults)
muc-dicebot - No documentation yet :( (info: https://modules.prosody.im/mod_muc_dicebot)
muc-eventsource - This module and its docs shamelessly forked from mod_pubsub_eventsource. (info: https://modules.prosody.im/mod_muc_eventsource)
muc-gc10 - Groupchat 1.0 was probably the protocol that predated XEP-0045: Multi-User Chat and there is still some compatibility that lives on, in the XEP and in implementations. (info: https://modules.prosody.im/mod_muc_gc10)
muc-hats-adhoc - This module provides an internal API (i.e. to other modules) to manage ‘hats’ for users in MUC rooms. (info: https://modules.prosody.im/mod_muc_hats_adhoc)
muc-hats-api - This module provides an internal API (i.e. to other modules) to manage ‘hats’ for users in MUC rooms. (info: https://modules.prosody.im/mod_muc_hats_api)
muc-hide-media - This module adds a room configuration option to hide inline media from MUCs and display them as links instead. (info: https://modules.prosody.im/mod_muc_hide_media)
muc-http-auth - This module externalizes MUC authorization via HTTP. Whenever a user wants to join a MUC, an HTTP GET request is made to authorization_url with the user’s bare jid (userJID), the MUC jid (mucJID) and the user’s nickname (nickname) as GET parameters. Example: https://www.prosody.im/users/can-join/?userJID=romeo@example.com&amp;mucJID=teaparty@chat.example.com&amp;nickname=Romeo (info: https://modules.prosody.im/mod_muc_http_auth)
muc-http-defaults - This module fetches configuration for MUC rooms from an API when rooms are created. (info: https://modules.prosody.im/mod_muc_http_defaults)
muc-inject-mentions - This module intercepts messages sent to a MUC, looks in the message’s body if a user was mentioned and injects a mention type reference to that user implementing XEP-0372 (info: https://modules.prosody.im/mod_muc_inject_mentions)
muc-intercom - This module allows sending a message to another MUC room. (info: https://modules.prosody.im/mod_muc_intercom)
muc-lang - This module adds support for advertising the language used in a room. (info: https://modules.prosody.im/mod_muc_lang)
muc-limits - This module allows you to control the maximum rate of ‘events’ in a MUC room. This makes it useful to prevent room floods (whether malicious or accidental). (info: https://modules.prosody.im/mod_muc_limits)
muc-local-only - This module allows you to make one or more MUCs as accessible to local users only. (info: https://modules.prosody.im/mod_muc_local_only)
muc-log - This module logs the conversation of chatrooms running on the server to Prosody’s data store. To view them you will need a module such as mod_muc_log_http. (info: https://modules.prosody.im/mod_muc_log)
muc-log-http - This module provides a built-in web interface to view chatroom logs stored by mod_muc_log. (info: https://modules.prosody.im/mod_muc_log_http)
muc-mam-hints - This module will check for MUC messages with XEP-0334 Message Processing Hints tags to qualify those messages as “historic” for later MAM archiving or not. (info: https://modules.prosody.im/mod_muc_mam_hints)
muc-mam-markers - Chat markers (XEP-0333) specification states that markers SHOULD be archived. This is already happening in one to one conversations in the personal archives but not in Group Chats. This module hooks the muc-message-is-historic event to customize the mod_muc_mam behavior and have the chat markers archived. (info: https://modules.prosody.im/mod_muc_mam_markers)
muc-markers - This module adds an internal Prosody API to retrieve the last displayed message by MUC occupants. (info: https://modules.prosody.im/mod_muc_markers)
muc-media-metadata - This module adds additional metadata to media shared in a MUC. This can help clients make decisions and provide better UI and enhanced privacy, by knowing things like file size without needing to make external network requests. (info: https://modules.prosody.im/mod_muc_media_metadata)
muc-mention-notifications - This module lets Prosody notify users when they’re mentioned in a MUC, even if they’re not currently present in it. (info: https://modules.prosody.im/mod_muc_mention_notifications)
muc-moderation - This module implements XEP-0425: Message Moderation. (info: https://modules.prosody.im/mod_muc_moderation)
muc-notifications - This module listens to MUC messages and sends a notification to the MUC members not present in the MUC at that moment. (info: https://modules.prosody.im/mod_muc_notifications)
muc-occupant-id - This module implements XEP-0421: Anonymous unique occupant identifiers for MUCs. (info: https://modules.prosody.im/mod_muc_occupant_id)
muc-offline-delivery - This module implements support for sending messages in a MUC to affiliated users who are not in the room. This is a custom extension by Tigase to allow push notifications from MUCs to users who are not currently connected. (info: https://modules.prosody.im/mod_muc_offline_delivery)
muc-ping - This module implements the Server Optimization part of XEP-0410: MUC Self-Ping (info: https://modules.prosody.im/mod_muc_ping)
muc-rai - This module implements XEP-xxxx: Room Activity Indicators. (info: https://modules.prosody.im/mod_muc_rai)
muc-require-tos - This module sends a message to visitors of a room, prompting them to accept or reject it. (info: https://modules.prosody.im/mod_muc_require_tos)
muc-restrict-media - This module adds a room configuration option to hide inline media from unaffiliated users in MUCs and display them as links instead. (info: https://modules.prosody.im/mod_muc_restrict_media)
muc-restrict-nick - This checks the nickname of a joining user against a configurable Lua pattern, and prevents them from joining if it does not match. (info: https://modules.prosody.im/mod_muc_restrict_nick)
muc-restrict-rooms - This module allows disabling room creation based on regexp patterns defined in configuration. (info: https://modules.prosody.im/mod_muc_restrict_rooms)
muc-rtbl - This module subscribes to a real-time blocklist using pubsub (XEP-0060). As entries are added and removed from the blocklist, it immediately updates a local service-wide ban list. (info: https://modules.prosody.im/mod_muc_rtbl)
muc-search - No documentation yet :( (info: https://modules.prosody.im/mod_muc_search)
muc-webchat-url - Many projects have a support room accessible via a web chat. This module allows making the URL to such a web chat discoverable via the XMPP service discovery protocol, enabling e.g. search engines to index and present these. (info: https://modules.prosody.im/mod_muc_webchat_url)
munin - This module implements the Munin reporting protocol, allowing you to collect statistics directly from Prosody into Munin. (info: https://modules.prosody.im/mod_munin)
net-dovecotauth - mod_net_dovecotauth is a server implementation of the Dovecot authentication protocol. It allows you to authenticate e.g. Postfix against your Prosody installation. (info: https://modules.prosody.im/mod_net_dovecotauth)
net-proxy - This module implements the PROXY protocol in versions 1 and 2, which fulfills the following usecase as described within the official protocol specifications: (info: https://modules.prosody.im/mod_net_proxy)
nodeinfo2 - This module exposes a nodeinfo2 .well-known URL for use e.g. from the-federation.info. (info: https://modules.prosody.im/mod_nodeinfo2)
nooffline-noerror - By default without mod_offline stanzas that would go to offline storage trigger error stanzas sent back to the sender to inform him of undeliverable stanzas. (info: https://modules.prosody.im/mod_nooffline_noerror)
offline-email - Quite often when I am out and about, I’m not able to connect to Jabber. It is usually much more likely I can access my email though (whether via the web, or a mobile client). (info: https://modules.prosody.im/mod_offline_email)
offline-hints - mod_offline does not take into account XEP-334 tags. This module will not add to the offline storage those messages tagged with &lt;no-store /&gt;. (info: https://modules.prosody.im/mod_offline_hints)
ogp - This module adds Open Graph Protocol metadata to URLs sent inside a MUC. (info: https://modules.prosody.im/mod_ogp)
omemo-all-access - Traditionally OMEMO encrypted messages could only be exchanged after gaining mutual presence subscription due to the OMEMO key material being stored in PEP. (info: https://modules.prosody.im/mod_omemo_all_access)
onhold - Enable mod_onhold to allow temporarily placing messages from particular JIDs “on hold” – i.e. store them, but do not deliver them until the hold status is taken away. (info: https://modules.prosody.im/mod_onhold)
onions - This plugin allows Prosody to connect to other servers that are running as a Tor hidden service. Running Prosody on a hidden service works without this module, this module is only necessary to allow Prosody to federate to hidden XMPP servers. (info: https://modules.prosody.im/mod_onions)
openid - OpenID is an decentralized authentication mechanism for the Web. mod_openid turns Prosody into an OpenID provider, allowing users to use their Prosody credentials to authenticate with various third party websites. (info: https://modules.prosody.im/mod_openid)
password-policy - No documentation yet :( (info: https://modules.prosody.im/mod_password_policy)
password-reset - This module allows users to reset their password via a simple link to a web page. (info: https://modules.prosody.im/mod_password_reset)
pastebin - Pastebins are used very often in IM, especially in chat rooms. You have a long log or command output which you need to send to someone over IM, and don’t want to fill their message window with it. Put it on a pastebin site, and give them the URL instead, simple. (info: https://modules.prosody.im/mod_pastebin)
pep-atom-categories - No documentation yet :( (info: https://modules.prosody.im/mod_pep_atom_categories)
pep-vcard-avatar - This module pushes the users nickname and avatar from vCards into PEP, or into vCards from PEP. This allows interop between older clients that use XEP-0153: vCard-Based Avatars to see the avatars of clients that use XEP-0084: User Avatar and vice versa. (info: https://modules.prosody.im/mod_pep_vcard_avatar)
pep-vcard-png-avatar - Conversations (an XMPP client for Android) is publishing PEP avatars in the webp file format. However Pidgin and other XMPP desktop clients can only show vcard avatars, that are in the PNG file format. This module is the mod_pep_vcard_avatar module extended to also change the avatar file format to PNG. (info: https://modules.prosody.im/mod_pep_vcard_png_avatar)
persisthosts - This module creates stub configuration files for newly activated hosts. (info: https://modules.prosody.im/mod_persisthosts)
ping-muc - This module reacts to server-to-server connections closing by performing XEP-0410: MUC Self-Ping from the server side to check if users are still connected to MUCs they have joined according mod_track_muc_joins. If it can’t be confirmed that the user is still joined then their client devices are notified about this allowing them to re-join. (info: https://modules.prosody.im/mod_ping_muc)
pinger - No documentation yet :( (info: https://modules.prosody.im/mod_pinger)
poke-strangers - In order to build heuristics for which messages are spam, it is necessary to log as many details as possible about the spammers. This module sends a version and disco query whenever a message is received from a JID to a user it is not subscribed to. The results are printed to Prosody’s log file at the ‘info’ level. Queried full JIDs are not queried again until Prosody restarts. (info: https://modules.prosody.im/mod_poke_strangers)
portcheck - This module adds a portcheck command to the shell intended for use with health checks, i.e. to check whether Prosody is listening to all expected ports. (info: https://modules.prosody.im/mod_portcheck)
post-msg - Sometimes it’s useful to have different interfaces to access XMPP. (info: https://modules.prosody.im/mod_post_msg)
presence-cache - This module stores a timestamp of the latest presence received from users contacts so that the client can see who is online faster when they sign in, and won’t have to wait for remote servers to reply. (info: https://modules.prosody.im/mod_presence_cache)
presence-dedup - This module tries to squash incoming identical presence stanzas to save some bandwidth at the cost of increased memory use. (info: https://modules.prosody.im/mod_presence_dedup)
privacy-lists - Privacy lists are a flexible method for blocking communications. (info: https://modules.prosody.im/mod_privacy_lists)
private-adhoc - This is a very simple module which implements an adhoc commant toretrieves the users private XML data. (info: https://modules.prosody.im/mod_private_adhoc)
privilege - Privileged Entity is an extension which allows entity/component to have privileged access to server (set/get roster, send message on behalf of server, access presence informations). It can be used to build services independently of server (e.g.: PEP service). (info: https://modules.prosody.im/mod_privilege)
proctitle - This module sets the process name to prosody so it shows up as such instead of lua in process management tools. (info: https://modules.prosody.im/mod_proctitle)
profile - mod_vcard_legacy and mod_vcard4 included with Prosody 0.11.x provide equivalent functionality. (info: https://modules.prosody.im/mod_profile)
prometheus - This module implements the Prometheus reporting protocol, allowing you to collect statistics directly from Prosody into Prometheus. (info: https://modules.prosody.im/mod_prometheus)
proxy65-whitelist - This module attempts to restrict use of non-whitelisted XEP-0065 proxies. (info: https://modules.prosody.im/mod_proxy65_whitelist)
pubsub-alertmanager - This module lets Alertmanager publish alerts to pubsub via webhooks. (info: https://modules.prosody.im/mod_pubsub_alertmanager)
pubsub-eventsource - Server-Sent Events is a simple HTTP/line-based protocol supported in HTML5, making it easy to receive a stream of “events” in realtime using the Javascript EventSource API. (info: https://modules.prosody.im/mod_pubsub_eventsource)
pubsub-feeds - This module allows Prosody to fetch Atom and RSS feeds for you, and push new results to subscribers over XMPP. (info: https://modules.prosody.im/mod_pubsub_feeds)
pubsub-github - This module accepts Github web hooks and publishes them to a local pubsub component for XMPP clients to subscribe to. (info: https://modules.prosody.im/mod_pubsub_github)
pubsub-hub - This module implements a PubSubHubbub (PuSH) hub, allowing PuSH clients to subscribe to local XMPP Publish-Subscribe nodes stored by mod_pubsub and receive real time updates to feeds. (info: https://modules.prosody.im/mod_pubsub_hub)
pubsub-mqtt - MQTT is a lightweight binary pubsub protocol suited to embedded devices. This module provides a way for MQTT clients to connect to Prosody and publish or subscribe to local pubsub nodes. (info: https://modules.prosody.im/mod_pubsub_mqtt)
pubsub-pivotaltracker - No documentation yet :( (info: https://modules.prosody.im/mod_pubsub_pivotaltracker)
pubsub-post - This module is a fairly generic WebHook receiver that lets you easily publish data to PubSub using a HTTP POST request. The payload can be Atom feeds, arbitrary XML, or arbitrary JSON. The type should be indicated via the Content-Type header. (info: https://modules.prosody.im/mod_pubsub_post)
pubsub-stats - This module publishes data from Prosody’s internal statistics into a PubSub node in XEP-0039 format. (info: https://modules.prosody.im/mod_pubsub_stats)
pubsub-subscription - This module lets you programmatically subscribe to updates from a pubsub node, even if the pubsub service is remote. (info: https://modules.prosody.im/mod_pubsub_subscription)
pubsub-summary - Module that generates a nicer text version of Atom feeds, meant for use with mod_pubsub_feeds and mod_pubsub_text_interface. (info: https://modules.prosody.im/mod_pubsub_summary)
pubsub-text-interface - This module lets you manage subscriptions to pubsub nodes via simple chat messages. Subscriptions are always added based on bare JID. The include_body flag is enabled so that a plain text body version of events can be included, where supported. (info: https://modules.prosody.im/mod_pubsub_text_interface)
pubsub-twitter - Twitter has an open ‘realtime’ search API, but it requires polling (within their rate limits). This module allows Prosody to poll for you, and push new results to subscribers over XMPP. (info: https://modules.prosody.im/mod_pubsub_twitter)
query-client-ver - This module sends a version query to clients when they connect, and logs the response, allowing statistics of client usage to be recorded. (info: https://modules.prosody.im/mod_query_client_ver)
rawdebug - Sometimes it is useful to get the raw XML logs from clients for debugging purposes, but some clients don’t expose this. (info: https://modules.prosody.im/mod_rawdebug)
readonly - This module blocks configured queries that change server state. (info: https://modules.prosody.im/mod_readonly)
register-apps - This module provides a way to configure a list of XMPP client apps recommended by the current server. This list is used by other modules such as mod_invites_page and mod_invites_register_web. (info: https://modules.prosody.im/mod_register_apps)
register-dnsbl - This module checks the IP addresses attempting to register an account against a DNSBL, blocking the attempt if there is a hit. (info: https://modules.prosody.im/mod_register_dnsbl)
register-dnsbl-firewall-mark - No documentation yet :( (info: https://modules.prosody.im/mod_register_dnsbl_firewall_mark)
register-dnsbl-warn - This module checks the IP address of newly registered users against a DNS block list. If a positive match is found, it gets logged. (info: https://modules.prosody.im/mod_register_dnsbl_warn)
register-json - This module let’s you activate a httpserver interface to handle data from webforms with POST and Base64 encoded JSON. (info: https://modules.prosody.im/mod_register_json)
register-oob-url - Registration redirect to out of band URL as described in XEP-0077: In-Band Registration. (info: https://modules.prosody.im/mod_register_oob_url)
register-redirect - Registration Redirect as explained in the IBR XEP. (info: https://modules.prosody.im/mod_register_redirect)
register-web - There are various reasons to prefer web registration instead of “in-band” account registration over XMPP. For example the lack of CAPTCHA support in clients and servers. (info: https://modules.prosody.im/mod_register_web)
reload-components - This module allows to load/unload external components after they have been added/removed to a configuration file. It is necessary to explicitly initiate a reload on Prosody either via prosodyctl reload or config:reload(). (info: https://modules.prosody.im/mod_reload_components)
reload-modules - By default Prosody does not reload modules at runtime unless instructed to via one of its admin interfaces. However sometimes you want to easily reload a module to apply new settings when the config changes. (info: https://modules.prosody.im/mod_reload_modules)
reminders - mod_reminders implements ProtoXEP: Reminders. (info: https://modules.prosody.im/mod_reminders)
remote-roster - This module adds support for XEP-0321: Remote Roster Management which is commonly used to allow components such as transports to modify the rosters of local users. (info: https://modules.prosody.im/mod_remote_roster)
require-otr - OTR, “Off The Record”, encryption allows clients to encrypt messages such that the server cannot read/modify them. (info: https://modules.prosody.im/mod_require_otr)
rest - This is yet another RESTful API for sending and receiving stanzas via Prosody. It can be used to build bots and components implemented as HTTP services. It is the spiritual successor to mod_post_msg and absorbs use cases from mod_http_rest and mod_component_http and other such modules floating around the Internet. (info: https://modules.prosody.im/mod_rest)
roster-allinall - This module is similar in purpouse to mod_groups, for when you want all users on the server to be in each others roster. (info: https://modules.prosody.im/mod_roster_allinall)
roster-command - This module allows you to perform various actions on user rosters via prosodyctl. (info: https://modules.prosody.im/mod_roster_command)
s2s-auth-compat - This module is a workaround for servers that try to do s2s authentication with certificates and SASL EXTERNAL, but do not send correct stream headers. Notably Openfire versions since 3.7 or 3.8. (info: https://modules.prosody.im/mod_s2s_auth_compat)
s2s-auth-dane - This module implements DANE as described in Using DNS Security Extensions (DNSSEC) and DNS-based Authentication of Named Entities (DANE) as a Prooftype for XMPP Domain Name Associations. (info: https://modules.prosody.im/mod_s2s_auth_dane)
s2s-auth-fingerprint - This module allows you to manually pin certificate fingerprints of remote servers. (info: https://modules.prosody.im/mod_s2s_auth_fingerprint)
s2s-auth-monkeysphere - Monkeysphere is a project aiming to introduce PGP’s web of trust to protocols such as SSH and TLS (which XMPP uses). (info: https://modules.prosody.im/mod_s2s_auth_monkeysphere)
s2s-auth-posh - PKIX over Secure HTTP (POSH) describes a method of securely delegating a domain to a hosting provider, without that hosting provider needing keys and certificates covering the hosted domain. (info: https://modules.prosody.im/mod_s2s_auth_posh)
s2s-auth-samecert - No documentation yet :( (info: https://modules.prosody.im/mod_s2s_auth_samecert)
s2s-blacklist - This module lets you block connections to remote servers at the s2s level. (info: https://modules.prosody.im/mod_s2s_blacklist)
s2s-idle-timeout - Some people find it preferable to close server-to-server connections after they have been silent for a while. (info: https://modules.prosody.im/mod_s2s_idle_timeout)
s2s-keepalive - This module periodically sends XEP-0199 ping requests to remote servers to keep your connection alive. (info: https://modules.prosody.im/mod_s2s_keepalive)
s2s-keysize-policy - This module sets the security status of s2s connections to invalid if their key is too small and their certificate was issued after 2014, per CA/B Forum guidelines. (info: https://modules.prosody.im/mod_s2s_keysize_policy)
s2s-log-certs - This module produces info level log messages with the certificate status and fingerprint every time an s2s connection is established. It can also optionally store this in persistent storage. (info: https://modules.prosody.im/mod_s2s_log_certs)
s2s-never-encrypt-blacklist - Let’s you stop Prosody from sending &lt;starttls xmlns=‘urn:ietf:params:xml:ns:xmpp-tls’&gt; feature to choppy/buggy servers which therefore would fail to re-negotiate and use a secure stream. (e.g. OpenFire 3.7.0) (info: https://modules.prosody.im/mod_s2s_never_encrypt_blacklist)
s2s-reload-newcomponent - Currently, module:reload command in console doesn’t load new components. This module will automatically load the new components (if any) when the config:reload command is run in the console. (info: https://modules.prosody.im/mod_s2s_reload_newcomponent)
s2s-status - Prosody already gives some insight into current s2s connections, e.g. via the s2s:show() command in the console. This will tell you about all current s2s connections. (info: https://modules.prosody.im/mod_s2s_status)
s2s-whitelist - This module lets you block connections to any remote servers not on a whitelist. (info: https://modules.prosody.im/mod_s2s_whitelist)
s2soutinjection - This module is similar to mod_srvinjection but less of an hack. (info: https://modules.prosody.im/mod_s2soutinjection)
sasl2 - Experimental implementation of XEP-0388: Extensible SASL Profile (info: https://modules.prosody.im/mod_sasl2)
sasl-oauthbearer - This module adds a new SASL mechanism OAUTHBEARER, as defined in RFC-7628. (info: https://modules.prosody.im/mod_sasl_oauthbearer)
saslauth-muc - No documentation yet :( (info: https://modules.prosody.im/mod_saslauth_muc)
saslname - This module implements a manual method for advertsing the Kerberos principal name as per XEP-0233. It could be used in conjection with a Kerberos authentication module. (info: https://modules.prosody.im/mod_saslname)
seclabels - This module implements XEP-0258: Security Labels in XMPP, but not actual policy enforcement. See for example mod_firewall for that. (info: https://modules.prosody.im/mod_seclabels)
secure-interfaces - Sometimes you might run clients without encryption on the same machine or LAN as Prosody — and you want Prosody to treat them as secure (e.g. allowing plaintext authentication) even though they are not encrypted. (info: https://modules.prosody.im/mod_secure_interfaces)
sentry - This module forwards select events to a Sentry server. (info: https://modules.prosody.im/mod_sentry)
server-status - This module fetches the current status of configured hosts and/or stanza statistics from mod_stanza_counter. And outputs it in either XML or JSON format. (info: https://modules.prosody.im/mod_server_status)
service-directories - No documentation yet :( (info: https://modules.prosody.im/mod_service_directories)
sift - SIFT is a technology to allow clients to filter incoming traffic on the server. This helps save bandwidth, etc. (info: https://modules.prosody.im/mod_sift)
slack-webhooks - This module provides a Slack-compatible “web hook” interface to Prosody MUCs. Both “incoming” web hooks, which allow Slack integrations to post messages to Prosody MUCs, and “outgoing” web hooks, which copy messages from Prosody MUCs to Slack-style integrations by HTTP, are supported. This can also be used, in conjunction with various Slack inter-namespace bridging tools, to provide a bidirectional bridge between a Prosody-hosted XMPP MUC and a Slack channel. (info: https://modules.prosody.im/mod_slack_webhooks)
smacks - By default XMPP is as reliable as your network is. Unfortunately in some cases that is not very reliable — in some network conditions disconnects can be frequent and message loss can occur. (info: https://modules.prosody.im/mod_smacks)
smacks-noerror - This module is deprecated and superseded by mod_smacks. If you explicitly disabled mod_offline you need the new module mod_nooffline_noerror to regain all features of this deprecated module. (info: https://modules.prosody.im/mod_smacks_noerror)
smacks-offline - This module is deprecated and superseded by mod_smacks. (info: https://modules.prosody.im/mod_smacks_offline)
sms-clickatell - This module provides and SMS gateway component which uses the Clickatell HTTP API to deliver text messages. See clickatell.com for details on their services. Note that at present, this is entirely one way: replies will either go nowhere or as sms to the source number you specify. (info: https://modules.prosody.im/mod_sms_clickatell)
sms-free - This module sends an SMS to your phone when you receive a message on XMPP when your status is xa or disconnected. (info: https://modules.prosody.im/mod_sms_free)
spam-reporting - This module is a very basic implementation of XEP-0377: Spam Reporting. (info: https://modules.prosody.im/mod_spam_reporting)
srvinjection - This Prosody plugin lets you manually override SRV records used for a remote host. (info: https://modules.prosody.im/mod_srvinjection)
sslv3-warn - No documentation yet :( (info: https://modules.prosody.im/mod_sslv3_warn)
stanza-counter - This module counts incoming and outgoing stanzas from when the instance started, and makes the data available to other modules by creating a global prosody. object (info: https://modules.prosody.im/mod_stanza_counter)
stanzadebug - This module logs the full stanzas that are sent and received into debug logs, for debugging purposes. (info: https://modules.prosody.im/mod_stanzadebug)
statistics - No documentation yet :( (info: https://modules.prosody.im/mod_statistics)
statistics-auth - No documentation yet :( (info: https://modules.prosody.im/mod_statistics_auth)
statistics-cputotal - No documentation yet :( (info: https://modules.prosody.im/mod_statistics_cputotal)
statistics-mem - No documentation yet :( (info: https://modules.prosody.im/mod_statistics_mem)
statistics-statsman - A module providing a streaming statistics interface like mod_statistics but based on the new statistics API introduced in Prosody 0.10. (info: https://modules.prosody.im/mod_statistics_statsman)
stats39 - This module provides public access to Prosodys internal statistics trough the XEP-0039: Statistics Gathering protocol. This is a simple protocol that returns triplets of name, unit and value for each know statistic collected by Prosody. The names used are the internal names assigned by modules or statsmanager, names from the registry are not used. (info: https://modules.prosody.im/mod_stats39)
statsd - No documentation yet :( (info: https://modules.prosody.im/mod_statsd)
storage-appendmap - This is an experimental storage driver where changed data is appended. Data is simply written as key = value pairs to the end of the file. This allows changes to individual keys to be written without needing to write out the entire object again, but reads would grow gradually larger as it still needs to read old overwritten keys. This may be suitable for e.g. rosters where individual contacts are changed at a time. In theory, this could also allow rolling back changes. (info: https://modules.prosody.im/mod_storage_appendmap)
storage-ejabberdsql-readonly - This is a storage backend using Ejabberd’s SQL backend. It depends on LuaDBI (info: https://modules.prosody.im/mod_storage_ejabberdsql_readonly)
storage-gdbm - This is a storage module using GNU DBM as backend. It supports archives. (info: https://modules.prosody.im/mod_storage_gdbm)
storage-ldap - See mod_lib_ldap for more information. (info: https://modules.prosody.im/mod_storage_ldap)
storage-lmdb - This is a storage module using OpenLDAP Lightning Memory-Mapped Database as backend. (info: https://modules.prosody.im/mod_storage_lmdb)
storage-memory - This module acts as a normal storage module for Prosody, but saves all data in memory only. All data is lost when the server stops. This makes it useful for testing, or certain specialized applications. (info: https://modules.prosody.im/mod_storage_memory)
storage-mongodb - This is a storage backend that uses MongoDB. Depends on luamongo bindings (info: https://modules.prosody.im/mod_storage_mongodb)
storage-muc-log - mod_muc_log provided logging of chatrooms running on the server to Prosody’s data store. This module gives access to this data using the 0.10+ stanza archive API, allowing legacy log data to be used with mod_mam_muc and mod_http_muc_log. (info: https://modules.prosody.im/mod_storage_muc_log)
storage-muconference-readonly - This is a storage backend using MU-Conference’s SQL storage. It depends on LuaDBI (info: https://modules.prosody.im/mod_storage_muconference_readonly)
storage-multi - This module attemtps to provide a storage driver that is really multiple storage drivers. This could be used for storage error tolerance or caching of data in a faster storage driver. (info: https://modules.prosody.im/mod_storage_multi)
storage-xmlarchive - This module implements stanza archives using files, similar to the default “internal” storage. Unlike “internal”, it saves messages in two files per day (and per user), one containing metadata and one containing the actual messages in XML format (hence the name). (info: https://modules.prosody.im/mod_storage_xmlarchive)
streamstats - No documentation yet :( (info: https://modules.prosody.im/mod_streamstats)
strict-https - This module implements HTTP Strict Transport Security and responds to all non-HTTPS requests with a 301 Moved Permanently redirect to the HTTPS equivalent of the path. (info: https://modules.prosody.im/mod_strict_https)
support-contact - This Prosody plugin adds a default contact to newly registered accounts. (info: https://modules.prosody.im/mod_support_contact)
support-room - This module adds newly registered users as members to a specified MUC room and sends them an invite. In a way, this is similar in purpose to mod_support_contact and mod_default_bookmarks. (info: https://modules.prosody.im/mod_support_room)
swedishchef - This module does some conversions on message bodys passed through it causing them to look like our beloved swedish chef had typed them. (info: https://modules.prosody.im/mod_swedishchef)
tcpproxy - It happens occasionally that I would like to use the XMPP server as a generic proxy for connecting to another service. It is especially awkward in some environments, and impossible in (for example) Javascript inside a web browser. (info: https://modules.prosody.im/mod_tcpproxy)
telnet-tlsinfo - This module adds two commands to the telnet console, c2s:showtls() and s2s:showtls(). These commands shows TLS parameters, such as ciphers and key agreement protocols, of all c2s or s2s connections. (info: https://modules.prosody.im/mod_telnet_tlsinfo)
test-data - This module is of use to developers who want to fill their Prosody storage with test data, e.g. for debugging, testing or performance measurements of Prosody or client code. (info: https://modules.prosody.im/mod_test_data)
throttle-presence - For most people ‘presence’ (status changes) of contacts make up most of the traffic received by their client. However much of the time it is not essential to have highly accurate presence information. (info: https://modules.prosody.im/mod_throttle_presence)
throttle-unsolicited - This module limits the rate of outgoing unsolicited messages from local clients. Optionally, unsolicited messages coming in from remote servers may be limited per s2s conneciton. A message counts as “unsolicited” if the receiving user hasn’t added the sending user to their roster. (info: https://modules.prosody.im/mod_throttle_unsolicited)
tls-policy - This module arose from discussions at the XMPP Summit about enforcing better ciphers in TLS. It may seem attractive to disallow some insecure ciphers or require forward secrecy, but doing this at the TLS level would the user with an unhelpful “Encryption failed” message. This module does this enforcing at the application level, allowing better error messages. (info: https://modules.prosody.im/mod_tls_policy)
tlsfail - This module responds to &lt;starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/&gt; with &lt;failure xmlns='urn:ietf:params:xml:ns:xmpp-tls'/&gt;, in order to test how clients and server behave. (info: https://modules.prosody.im/mod_tlsfail)
tos - A very drafty module to implement some kind of Terms of Service acceptance tool. (info: https://modules.prosody.im/mod_tos)
traceback - This module writes out a traceback to traceback.txt in Prosodys data directory (see prosodyctl about) when the signal SIGUSR1 is received. This is useful when debugging seemingly frozen instances in case it is stuck in Lua code. (info: https://modules.prosody.im/mod_traceback)
track-muc-joins - This module attempts to keep track of what MUC chat rooms users have joined. It’s not very useful on its own, but can be used by other modules to influence decisions. (info: https://modules.prosody.im/mod_track_muc_joins)
turn-external - This module advertises STUN/TURN service to clients via XEP-0215 (it utilizes mod_external_services to do so, which will be automatically loaded by this module and must be available). (info: https://modules.prosody.im/mod_turn_external)
turncredentials - XEP-0215 implementation for time-limited TURN credentials. (info: https://modules.prosody.im/mod_turncredentials)
tweet-data - This module adds Open Graph Protocol metadata to Twitter.com tweet URLs sent inside a MUC. (info: https://modules.prosody.im/mod_tweet_data)
twitter - Twitter has simple API to use, so I tried to deal with it via Prosody. I didn’t manage to finish this module, but it is nice example of component that accepts registrations, unregistrations, does HTTP polling and so on. Maybe someone will finnish this idea. (info: https://modules.prosody.im/mod_twitter)
uptime-presence - This module simply responds to a presence probe sent to the server with a presence staza containing a timestamp from when the server started. (info: https://modules.prosody.im/mod_uptime_presence)
vcard-command - No documentation yet :( (info: https://modules.prosody.im/mod_vcard_command)
vcard-muc - This module adds the ability to set vCard for MUC rooms. One of the most common use case is to be able to define an avatar for your own MUC room. (info: https://modules.prosody.im/mod_vcard_muc)
vjud - Basic implementation of XEP-0055: Jabber Search. (info: https://modules.prosody.im/mod_vjud)
warn-legacy-tls - TLS 1.0 and TLS 1.1 are about to be obsolete. This module warns clients if they are using those versions, to prepare for disabling them. (info: https://modules.prosody.im/mod_warn_legacy_tls)
watch-spam-reports - This module sends a message to the server admins for incoming XEP-0377 spam reports. It depends on mod_spam_reporting and doesn’t require any configuration. (info: https://modules.prosody.im/mod_watch_spam_reports)
watchuntrusted - Similar to mod_watchregistrations, this module warns admins when an s2s connection fails due for encryption or trust reasons. (info: https://modules.prosody.im/mod_watchuntrusted)
webpresence - Quite often you may want to publish your Jabber status to your blog or website. mod_webpresence allows you to do exactly this. (info: https://modules.prosody.im/mod_webpresence)
welcome-page - This module serves a welcome page to users, and allows them to create an account invite via the web on invite-only servers. (info: https://modules.prosody.im/mod_welcome_page)
xhtmlim - This module attempts to sanitize XHTML-IM messages. (info: https://modules.prosody.im/mod_xhtmlim)

